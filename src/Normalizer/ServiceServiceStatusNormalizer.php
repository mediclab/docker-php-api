<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ServiceServiceStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Docker\\API\\Model\\ServiceServiceStatus';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Docker\\API\\Model\\ServiceServiceStatus';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Docker\API\Model\ServiceServiceStatus();
        if (property_exists($data, 'RunningTasks') && $data->{'RunningTasks'} !== null) {
            $object->setRunningTasks($data->{'RunningTasks'});
        }
        if (property_exists($data, 'DesiredTasks') && $data->{'DesiredTasks'} !== null) {
            $object->setDesiredTasks($data->{'DesiredTasks'});
        }
        if (property_exists($data, 'CompletedTasks') && $data->{'CompletedTasks'} !== null) {
            $object->setCompletedTasks($data->{'CompletedTasks'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getRunningTasks()) {
            $data->{'RunningTasks'} = $object->getRunningTasks();
        }
        if (null !== $object->getDesiredTasks()) {
            $data->{'DesiredTasks'} = $object->getDesiredTasks();
        }
        if (null !== $object->getCompletedTasks()) {
            $data->{'CompletedTasks'} = $object->getCompletedTasks();
        }

        return $data;
    }
}
